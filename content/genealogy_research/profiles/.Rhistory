print('Hello, World!')
3 + 5
(3 + 5)* 2 # this is a comment
(3 + 5)* 2  this is a comment
1+
4
1 +
1 == 1
all.equal(1.1, 1.10)
?all.equal
all.equal(1.1, 1.10, 0.01)
x <- 1/40
x <-  x+1
rm(x)
min_height = 3
rm(min_height)
max.height = 3
rm(max.height)
mass <- 47.5
age <- 12
mass * 2.3
mass <- mass*2.3
age <- age - 20
age <- 122
age <- age - 20
mass > age
rm(list=ls())
install.packages(ggplot2, plyr, gapminder)
installed.packages(ggplot2)
installe.packages(ggplot2)
?install.packages
install.packages(c("ggplot2", "plyr", "gapminder"))
library(dplyr)
library(ggplot2)
iteration = 0
mySums <- vector()
for (i in 1: 6){
for (j in 1:6){
for(k in 1:6){
iteration = iteration +1
print(paste0("Combination: ", iteration, " -- ", i, "-", j, "-", k))
mySums <- c(mySums, i+j+k)
}
}
}
unique(mySums)
myDF$openedDoor <- apply(myDF, 1, function(x){
optionsToChoose <- setdiff(numDoors, as.numeric(x))
if(length(optionsToChoose) == 1){
return(optionsToChoose)
}else{
return(sample(optionsToChoose,1))
}
})
library(dplyr)
numSims <- 10000
numDoors <- 1:3
myDF <- data.frame(winningDoor = sample(x = numDoors, size = numSims, replace = TRUE),
initialChoice = sample(x = numDoors, size = numSims, replace = TRUE))
myDF$openedDoor <- apply(myDF, 1, function(x){
optionsToChoose <- setdiff(numDoors, as.numeric(x))
if(length(optionsToChoose) == 1){
return(optionsToChoose)
}else{
return(sample(optionsToChoose,1))
}
})
myDF$selectedDoor <- apply(myDF, 1, function(x){
return(sample(setdiff(numDoors, x['openedDoor']), 1))
})
myDF <- myDF %>%
mutate(NoSwitch = ifelse(selectedDoor == initialChoice, 1, 0))
sum((myDF$selectedDoor == myDF$winningDoor & myDF$NoSwitch==1))/sum(myDF$NoSwitch ==1)
sum((myDF$selectedDoor == myDF$winningDoor & myDF$NoSwitch==0))/sum(myDF$NoSwitch ==0)
library(ggplot2)
numSamples <- 1000
obsPerSample <- 1000
###Uniform Distr
resultsUniform <- unlist(lapply(1:numSamples, function(x){
return(mean(
runif(obsPerSample, min = 0, max = 100)
)
)
}))
resultsExponential <- unlist(lapply(1:numSamples, function(x){
return(mean(
rexp(obsPerSample, rate = 1/50)
))
}))
resultsBinom <- unlist(lapply(1:numSamples, function(x){
return(mean(
rbinom(obsPerSample, size = 1, prob = .2)
))
}))
ggplot(data.frame(resultsUniform), aes(resultsUniform, fill = cut(resultsUniform,100))) + geom_histogram(show.legend=FALSE)+theme_minimal()+ggtitle("Uniform")
ggplot(data.frame(resultsExponential), aes(resultsExponential, fill = cut(resultsExponential,100))) + geom_histogram(show.legend=FALSE)+theme_minimal()+ggtitle("Exponential")
ggplot(data.frame(resultsBinom), aes(resultsBinom, fill = cut(resultsBinom,100))) + geom_histogram(show.legend=FALSE)+theme_minimal()+ggtitle("Binomial")
hist(resultsUniform)
hist(resultsExponential)
hist(resultsUniform)
shapiro.test(resultsUniform)
shapiro.test(resultsExponential)
shapiro.test(resultsBinom)
demo()
install.packages("readxl")
#these libraries are necessary
library(readxl)
library(httr)
#create the URL where the dataset is stored with automatic updates every day
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-",format(Sys.time(), "%Y-%m-%d"), ".xlsx", sep = "")
#download the dataset from the website to a local temporary file
GET(url, authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".xlsx")))
#read the Dataset sheet into “R”
data <- read_excel(tf)
install.packages("readxl")
install.packages("readxl")
library(readxl)
library(httr)
install.packages("httr")
library(httr)
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-",format(Sys.time(), "%Y-%m-%d"), ".xlsx", sep = "")
GET(url, authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".xlsx")))
data <- read_excel(tf)
data <- read_excel(tf)
setwd("~/Google Drive/Website/GitHub/academic-kickstart/content/genealogy_research/profiles")
blogdown:::serve_site()
